// Generated by CoffeeScript 1.10.0
let WebpackDevServer, _continueOnError, argv, autoprefixer, autoprefixerOpts, babel, bless, browserSync, defaultTasks, del, dest, exec, extend, gulp, gutil, istanbul, merge, mocha, nodemon, sass, source, sourcemaps, spriteSmith, src, webpack, webpackConfig;

console.time('Loading plugins');

require('babel/register');

autoprefixer = require('gulp-autoprefixer');

babel = require('gulp-babel');

del = require('del');

extend = require('gulp-extend');

gulp = require('gulp');

gutil = require('gulp-util');

istanbul = require('gulp-istanbul');

mocha = require('gulp-mocha');

nodemon = require('gulp-nodemon');

sass = require('gulp-sass');

bless = require('gulp-bless');

source = require('vinyl-source-stream');

sourcemaps = require('gulp-sourcemaps');

webpack = require('webpack');

WebpackDevServer = require('webpack-dev-server');

spriteSmith = require('gulp.spritesmith');

merge = require('merge-stream');

argv = require('yargs').argv;

exec = require('child_process').exec;

console.timeEnd('Loading plugins');

defaultTasks = ['clean', 'nodemon', 'watch', 'scss', 'webpack'];

webpackConfig = require('./webpack.config');

if (webpackConfig.custom.hotLoadPort) {
  defaultTasks.push('webpack-dev-server');
}

browserSync = null;

src = {
  allJS: 'app/**/*.js',
  scss: 'public/scss/main.scss'
};

dest = {
  build: './build',
  app: './node_modules/app',
  css: 'public/stylesheets',
  image: 'public/images'
};

gulp.task('test', function(cb) {
  gulp.src([dest.app + "/**/*.js"]).pipe(istanbul()).pipe(istanbul.hookRequire()).on('finish', function() {
    return gulp.src(['test/unit/**/*.coffee', 'test/unit/**/*.js', 'test/scss/**/*.js']).pipe(mocha()).pipe(istanbul.writeReports({
      dir: dest.build + "/coverage"
    })).on('end', cb);
  });
});

gulp.task('default', defaultTasks, function() {
  gutil.log('[default] done \uD83D\uDE80');
});

gulp.task('sprite', function() {
  let cssStream, imgStream, spriteData;
  spriteData = gulp.src(dest.image + "/flag_256/*png").pipe(spriteSmith({
    imgName: '../images/map-sprite.png',
    cssName: 'map-sprite.css',
    padding: 5,
    cssOpts: {
      functions: false,
      cssSelector: function(item) {
        return '.flag--' + item.name;
      }
    }
  }));
  imgStream = spriteData.img.pipe(gulp.dest(dest.image));
  cssStream = spriteData.css.pipe(gulp.dest(dest.css));
  return merge(imgStream, cssStream);
});

gulp.task('watch', function() {
  gulp.watch('public/scss/**/*.scss', ['scss']);
});

gulp.task('watch:js', ['babel'], function() {
  gulp.watch(src.allJS, ['babel']);
});

gulp.task('clean', function() {
  return del(["" + dest.app, dest.build + "/**/*"]);
});

autoprefixerOpts = {
  browsers: ['last 2 versions']
};

gulp.task('scss:production', function() {
  return gulp.src(src.scss).pipe(sass({
    outputStyle: 'compressed'
  })).pipe(autoprefixer(autoprefixerOpts)).pipe(bless()).pipe(gulp.dest(dest.css));
});

gulp.task('scss', function() {
  return gulp.src(src.scss).pipe(sourcemaps.init()).pipe(sass({
    onError: function(e) {
      return gutil.log(e);
    }
  })).pipe(autoprefixer(autoprefixerOpts)).pipe(sourcemaps.write('.')).pipe(gulp.dest(dest.css)).pipe(((browserSync != null) && browserSync.active ? browserSync.reload({
    stream: true
  }) : gutil.noop()));
});

_continueOnError = function(fn) {
  let _fn;
  _fn = fn();
  _fn.on('error', function(e) {
    gutil.log(e);
    _fn.end();
  });
  return _fn;
};

gulp.task('babel', function() {
  let b;
  b = /^watch/.test(argv._[0]) ? _continueOnError(babel) : babel();
  return gulp.src(src.allJS).pipe(b).pipe(sourcemaps.init()).pipe(sourcemaps.write('.')).pipe(gulp.dest(dest.app));
});

gulp.task('webpack', function(cb) {
  webpack(webpackConfig, function(err, stats) {
    if (err) {
      throw new gutil.PluginError("webpack", err);
    }
    if (argv.debug) {
      gutil.log("[webpack]", stats.toString({
        timings: true,
        colors: true
      }));
    } else {
      gutil.log("[webpack] Finished \ud83d\udc4d");
    }
    return cb();
  });
  return;
  return gulp.src('./app/client.js').pipe(webpack(webpackConfig)).pipe(gulp.dest('public/javascript/'));
});

gulp.task("webpack-dev-server", ['scss', 'webpack'], function(callback) {
  let devServer, hotLoadPort;
  hotLoadPort = webpackConfig.custom.hotLoadPort;
  devServer = new WebpackDevServer(webpack(webpackConfig), {
    contentBase: webpackConfig.output.path,
    hot: true,
    noInfo: true,
    watchOptions: {
      aggregateTimeout: 100
    },
    headers: {
      'Access-Control-Allow-Origin': '*'
    }
  });
  devServer.listen(hotLoadPort, "0.0.0.0", function(err) {
    if (err) {
      throw new gutil.PluginError("webpack-dev-server", err);
    }
    gutil.log("[webpack-dev-server]", "" + webpackConfig.output.publicPath);
    return callback();
  });
});

gulp.task('nodemon', function() {
  let isNodemonRunning;
  nodemon({
    script: 'bin/www',
    nodeArgs: [argv.debug ? '--debug' : '']
  }).on('restart', function() {
    gutil.log('nodemon restarted! \uD83D\uDE80');
  });
  return isNodemonRunning = true;
});

gulp.task('browser-sync', function() {
  browserSync = require('browser-sync');
  browserSync({
    proxy: 'localhost:3000',
    startPath: '/login',
    port: 3333
  });
});

gulp.task('locale', function() {
  return gulp.src('locales/client/en/*.json').pipe(extend('en.json')).pipe(gulp.dest('public/locales'));
});

